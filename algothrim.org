
* 搜索引擎算法  
** 倒排索引
   倒排索引＝词典+倒排文件


   \begin{multline}
   Q=Query    \\
   word  \longleftarrow shift Q \\
   posting_list=fetchList(word) \\
   for all word \in Q do   \\
       posting_list2 \longleftarrow fetchList(word) \\
       posting_list \longleftarrow  Intersect(posting_list,posting_list2) \\
   end for  \\ 
   array \longleftarrow newArray()  \\
   for all posting_list \in postling_list do \\
       elem \longleftarrow newElement()  \\
       elem.val \longleftarrow getAttribute(posting) \\
       elem.ref \longleftarrow posting.doc_ref \\
       push array,elem  \\
    end for
  \end{multline}

* 文本编辑算法
** Piece Table
   一种Append-Only的方式，更新的内容都是以追加形式保存的Piece Table整体可以归纳为原始内容
   (original)，新增内容(added)，内容顺序关系对象(pieces)
   插入一行文本时，文本会append到一个added字符串中，后续无论在那些位置删除改增加的文本都会
   放到added末尾
   为了知道用户在哪里输入的文本，Piece Table需要记录哪个区域是从original来的，哪些是从added
   来的，需要以下信息
   type:属于哪个字符
   start:字符串中的开始位置
   length:字符长度
   #+BEGIN_SRC js
     {
	 "original":"First line\nSecond line",
	 "added":"Third line",
	 "pieces":[
	     Piece(start=0,length=10,type="original"),
	     Piece(start=0,length=10,type="added"),
	     Piece(start=11,length=11,type="original")
	 ],
     }
   #+END_SRC
   vscode版Piece Table
** Gap buffer  (emacs)

** Rope
   
* 操作系统相关算法  
    
** 红黑树
* 网络相关算法
  
* 前端框架diff算法
** vue
* 词法分析相关算法
** 有限状态机(Finite-state Machne,FSM)
* 存储引擎算法
** B树
   一种树型数据结构，它只有三种节点
   * 根节点   －－  构造树的起始
   * 内部节点 －－  保存键
   * 叶节点   －－ 实际保存数据的节点
* 分式布式算法

