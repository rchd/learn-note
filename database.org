* postgresql
  
** 编译
   执行如下命令即可编译安装
   #+begin_src sh
     ./configure -prefix=/usr/local/pgsql && make && make install 
   #+end_src
   即可编译安装
   #+begin_src sh
     export PATH=$PATH:/usr/local/pgsql/bin
     adduser postgres && su - postgres

     initdb -D /var/db/pgsql

     pg_ctl -D /var/db/pgsql -l logfile start
   #+end_src

   启用调试
   #+begin_src sh
     ./configure --enable-debug
   #+end_src
   接着安装即可

   #+begin_src sh
     psql
     select pg_backend_pid(); # 输出进行连接的线程
     gdb attach [thread-id]       
   #+end_src

   打上断点，使用dir命令设置源码目录，即可开始调试

** postgresql相关的命令行工具
   客户端应用
   | 命令           | 说明                                                  |
   |----------------+-------------------------------------------------------|
   | clusterdb      | 聚簇一个PostgreSQL数据库                              |
   | createdb       | 创建一个新的PostgreSQL数据库                          |
   | createuser     | 定义一个新的PostgreSQL用户账户                        |
   | dropdb         | 移除一个PostgreSQL数据库                              |
   | dropuser       | 移除一个PostgresSQL用户账户                           |
   | ecpg           | 嵌入式C预处理器                                       |
   | pg_basebackup  | 获得一个PostgreSQL集簇的一个基础备份                  |
   | pgbench        | 在PostgreSQL运行一个基准测试                          |
   | pg_config      | 获取已安装的PostgreSQL的信息                          |
   | pg_dump        | 把PostgreSQL数据库抽取为一个脚本文件或其他归档文件    |
   | pg_dumpall     | 将一个PostgreSQL数据集簇抽取到一个脚本文件中          |
   | pg_isready     | 检测一个PostgreSQL服务器的连接状态                    |
   | pg_receivewal  | 以流的方式从一个PostgreSQL服务器得到预写式日志        |
   | pg_recvlogical | 控制PostgreSQL逻辑解码流                              |
   | pg_restore     | 从一个由pg_dump创建的归档文件恢复一个PostgreSQL数据库 |
   | psql           | PostgreSQL的交互式终端                                |
   | reindexdb      | 重索引一个PostgreSQL数据库                            |
   | vacuumdb       | 对一个PostgreSQL数据库进行垃圾收集和分析              |


   服务器应用
   | 命令             | 说明                                                             |
   |------------------+------------------------------------------------------------------|
   | initdb           | 创建一个新的postgresql数据库集簇                                 |
   | pg_achivecleanup | 清理PostgreSQL WAL归档文件                                       |
   | pg_checksums     | 在PostgreSQL数据库集簇中启用，禁用或检查数据校验和               |
   | pg_controldata   | 显示一个PostgreSQL数据库集簇的控制信息                           |
   | pg_ctl           | 初始化，启动，停止或控制一个PostgreSQL服务器                     |
   | pg_resetwal      | 重置一个PostgreSQL数据库集簇的预写式日志以及控制信息             |
   | pg_rewind        | 把一个PostgreSQL数据目录与另一个从该目录中复制出来的数据目录同步 |
   | pg_test_fsync    | 为PostgreSQL判断最快的wal_sync_method                            |
   | pg_test_timing   | 度量计时开销                                                     |
   | pg_upgrade       | 升级PostgreSQL服务器实例                                         |
   | pg_waldump       | 以及人类可读的形式显示一个PostgreSQL数据库集簇的预写式日志       |
   | postgres         | PostgreSQL数据库服务器                                           |
   | postmaster       | PostgreSQL数据库服务器                                                           |

   
*  源码目录分析
  主要代码位于src/backend/目录下，src/include则包含相关定义信息，src/bin包含postgres的相关工具
  | 目录       | 说明                                                                        |
  |------------+-----------------------------------------------------------------------------|
  | bootstrap  | 创建初的模板数据库                                                          |
  | main       | 主程序模块，负责将控制权转到Postmaster进程或Postgres进程                    |
  | postmaster | 监听用户请求的守护进程，并控制Postgres进程的启动和终止                      |
  | libpq      | C/C++的库函数，处理与客户端间的通信                                         |
  | tcop       | Postgres服务进程的主要部分，调用parser,optimizer, executor,commands 执行SQL |
  | parser     | 语法分析，将SQL查询转化为内部查询树                                         |
  | optimizer  | 优化器，根据查询树创建最优的查询路径和查询计划                              |
  | executor   | 执行器，执行来自optimizer的查询计划                                         |
  | commands   | 执行非计划查询的SQL命令                                                     |
  | catalog    | 系统表操作，包含用于操作系统表的专用函数                                    |
  | storage    | 管理各种类型的存储系统                                                      |
  | access     | 提供各种存取方法，支持堆，索引等对数据的存取                                |
  | nodes      | 定义系统内部所用到的节点，链表等结构，以及处理这些结构的函数                |
  | utils      | 各种支持函数，如错误报告，各种初始化操作                                    |
  | regex      | 正则表达式库及相关函数，用于支持正则表达式处理                              |
  | rewrite    | 查询重写，根据规则系统对查询进行重写                                        |
  | tsearch    | 全文索引，倒排索引                                                          |
  | port       | 平台兼容性处理相关的函数我                                                  |

