* postgresql
  
** 编译
   执行如下命令即可编译安装
   #+begin_src sh
     ./configure -prefix=/usr/local/pgsql && make && make install 
   #+end_src
   即可编译安装
   #+begin_src sh
     export PATH=$PATH:/usr/local/pgsql/bin
     adduser postgres && su - postgres

     initdb -D /var/db/pgsql

     pg_ctl -D /var/db/pgsql -l logfile start
   #+end_src

   启用调试
   #+begin_src sh
     ./configure --enable-debug
   #+end_src
   接着安装即可

   #+begin_src sh
     psql
     select pg_backend_pid(); # 输出进行连接的线程
     gdb attach [thread-id]       
   #+end_src

   打上断点，使用dir命令设置源码目录，即可开始调试
   
** postgresql hook相关函数
   | 钩子函数           | 说明说明       |
   |--------------------+----------------|
   | ExecutorStart_hook | 执行器开始之前 |
   | ExecutorRun_hook   | 执行器开始     |
   | ExecutorEnd_hook   | 执行器结束之后 |
   | planner_hook       | 规划器钩子函数 |
   |                    |                |



   

** postgresql相关的命令行工具
   客户端应用
   | 命令           | 说明                                                  |
   |----------------+-------------------------------------------------------|
   | clusterdb      | 聚簇一个PostgreSQL数据库                              |
   | createdb       | 创建一个新的PostgreSQL数据库                          |
   | createuser     | 定义一个新的PostgreSQL用户账户                        |
   | dropdb         | 移除一个PostgreSQL数据库                              |
   | dropuser       | 移除一个PostgresSQL用户账户                           |
   | ecpg           | 嵌入式C预处理器                                       |
   | pg_basebackup  | 获得一个PostgreSQL集簇的一个基础备份                  |
   | pgbench        | 在PostgreSQL运行一个基准测试                          |
   | pg_config      | 获取已安装的PostgreSQL的信息                          |
   | pg_dump        | 把PostgreSQL数据库抽取为一个脚本文件或其他归档文件    |
   | pg_dumpall     | 将一个PostgreSQL数据集簇抽取到一个脚本文件中          |
   | pg_isready     | 检测一个PostgreSQL服务器的连接状态                    |
   | pg_receivewal  | 以流的方式从一个PostgreSQL服务器得到预写式日志        |
   | pg_recvlogical | 控制PostgreSQL逻辑解码流                              |
   | pg_restore     | 从一个由pg_dump创建的归档文件恢复一个PostgreSQL数据库 |
   | psql           | PostgreSQL的交互式终端                                |
   | reindexdb      | 重索引一个PostgreSQL数据库                            |
   | vacuumdb       | 对一个PostgreSQL数据库进行垃圾收集和分析              |


   服务器应用
   | 命令             | 说明                                                             |
   |------------------+------------------------------------------------------------------|
   | initdb           | 创建一个新的postgresql数据库集簇                                 |
   | pg_achivecleanup | 清理PostgreSQL WAL归档文件                                       |
   | pg_checksums     | 在PostgreSQL数据库集簇中启用，禁用或检查数据校验和               |
   | pg_controldata   | 显示一个PostgreSQL数据库集簇的控制信息                           |
   | pg_ctl           | 初始化，启动，停止或控制一个PostgreSQL服务器                     |
   | pg_resetwal      | 重置一个PostgreSQL数据库集簇的预写式日志以及控制信息             |
   | pg_rewind        | 把一个PostgreSQL数据目录与另一个从该目录中复制出来的数据目录同步 |
   | pg_test_fsync    | 为PostgreSQL判断最快的wal_sync_method                            |
   | pg_test_timing   | 度量计时开销                                                     |
   | pg_upgrade       | 升级PostgreSQL服务器实例                                         |
   | pg_waldump       | 以及人类可读的形式显示一个PostgreSQL数据库集簇的预写式日志       |
   | postgres         | PostgreSQL数据库服务器                                           |
   | postmaster       | PostgreSQL数据库服务器                                           |

** 源码目录分析
   主要代码位于src/backend/目录下，src/include则包含相关定义信息，src/bin包含postgres的相关工具
   | 目录       | 说明                                                                        |
   |------------+-----------------------------------------------------------------------------|
   | bootstrap  | 创建初的模板数据库                                                          |
   | main       | 主程序模块，负责将控制权转到Postmaster进程或Postgres进程                    |
   | postmaster | 监听用户请求的守护进程，并控制Postgres进程的启动和终止                      |
   | libpq      | C/C++的库函数，处理与客户端间的通信                                         |
   | tcop       | Postgres服务进程的主要部分，调用parser,optimizer, executor,commands 执行SQL |
   | parser     | 语法分析，将SQL查询转化为内部查询树                                         |
   | optimizer  | 优化器，根据查询树创建最优的查询路径和查询计划                              |
   | executor   | 执行器，执行来自optimizer的查询计划                                         |
   | commands   | 执行非计划查询的SQL命令                                                     |
   | catalog    | 系统表操作，包含用于操作系统表的专用函数                                    |
   | storage    | 管理各种类型的存储系统                                                      |
   | access     | 提供各种存取方法，支持堆，索引等对数据的存取                                |
   | nodes      | 定义系统内部所用到的节点，链表等结构，以及处理这些结构的函数                |
   | utils      | 各种支持函数，如错误报告，各种初始化操作                                    |
   | regex      | 正则表达式库及相关函数，用于支持正则表达式处理                              |
   | rewrite    | 查询重写，根据规则系统对查询进行重写                                        |
   | tsearch    | 全文索引，倒排索引                                                          |
   | port       | 平台兼容性处理相关的函数我                                                  |

*** 重要函数
    main/main.c/main 是postgres的主函数

    SubPostmasterMain函数负责开启辅助功能的子进程
    依调用
    BackendRun -> PostgresMain
    AuxiliaryProcessMain -> StartupProcessMain
                         -> PgArchiverMain
			 -> BackgroundWriterMain
			 -> CheckpinterMain
			 -> WalWriterMain
			 -> WalReceiverMain
    AutoVacLauncherMain
    AutoVacWorkerMain
    StartBackgroundWorker
    SysLoggerMain
    

    PostmasterMain则是开启主进程监听端口
    ServerLoop -> BackendStartup ->  BackendRun -> PostgreMain

    PostgreMain -> ReadCommand 读取请求字符串，返回firstchar
                -> firstchar为Q 执行exec_simple_query，执行一个查询

    查询执行流程		
    exec_simple_query -> pg_parse_query -> raw_parser -> scanner_init
                                                      -> parser_init
						      -> base_yyparse
						      -> scanner_finish
                      -> pg_analyze_and_rewrite_fixedparams -> parse_analyze_fixedparams -> transformTopLevelstmt
		                                            -> pg_rewrite_query 
		      -> pg_plan_queries -> pg_plan_query -> planner
		      -> CreatePortal
		      -> PortalStart -> CreateQueryDesc
		                     -> ExecutorStart 
		      -> PortalRun -> PortalRunSelect -> ExecutorRun 
		                   -> PortalRunMulti  -> ProcessQuery
				                      -> PortalRunUtility -> ProcessUtility
		      -> PortalDrop 

    规划器
    planner -> standard_planner -> subquery_planner -> SS_process_ctes
                                                    -> transform_MERGE_to_join
						    -> replace_empty_jointree
						    -> pull_up_sublinks
						    -> prepocess_function_rtes
						    -> pull_up_subquires
						    -> flatten_simple_union_all
						    -> preprocess_rowmarks
						    -> preprocess_expressioin
						    -> remove_useless_groupby_columns
						    -> reduce_outer_joins
						    -> remove_useless_result_rtes
						    -> grouping_planner -> preprocess_limit
						                        -> proprocess_grouping_sets
									-> preprocess_groupclause
									-> preprocess_targetlist
									-> group_planner -> make_one_rel 
						    -> SS_identify_outer_params
						    -> fetch_upper_rel
						    -> SS_charge_for_initplans
						    -> set_cheapest 
                                -> create_plan -> create_plan_recurse
				               -> SS_attach_initplans 
    

  libpq对外开放协议
  ServerLoop -> ConnCreate -> StreamConnection -> pg_setkeepalivesidle
                                               -> pg_setkeepalivesinterval
			     		       -> pg_setkeepalivescount
					       -> pg_settcpusertimeout 

             -> BackendStartup -> BackendInitialize -> pq_init
                                                    -> CreateWaitEventSet
				       		    -> AddWaitEventToSet
                               -> BackendRun -> PostgresMian -> pq_comm_reset
			                                     -> ReadCommand
							     -> exec_simple_query -> BeginCommand
							                          -> CreateDestReceiver
							  			  -> EndCommand
                  
    主从复制
    walsender
    PostgreMain -> exec_replicatioin_command -> SnpBuildClearExportedSnapshot
                                             -> replication_scanner_init
					     -> replication_yyparse
					     -> StartReplication -> WalSndLoop
					                         -> EndReplicationCommand
    walreceiver
    main -> SubPostmasterMain -> AuxiliaryProcessMain -> WalReceiverMain -> walrcv_connect
                                                                         -> walrcv_identify_system
									 -> walrcv_create_slot
									 -> walrcv_startstreaming
									 -> walrcv_receive
									 -> XLogWALRcvProcessMsg
									 -> XLogWalRcvSendReply
									 -> XLogWalRcvFlush
									 -> walrcv_endstreaming 
    walwriter
    main -> SubPostmasterMain -> AuxiliaryProcessMain -> WalWriterMain -> XLogBackgroundFlush
                                                                       -> XLOGFileClose

    bgwriter
    main -> SubPostmasterMain -> AuxiliaryProcessMain -> BackgroundWriterMain -> BgBufferSync -> SyncOneBuffer -> FlushBuffer
                                                                                                               -> smgrwrite
													       -> XLogFlush 
													       
    checkpointer
    main -> SubPostmasterMain -> AuxiliaryProcessMain -> CheckPointerMain -> CreateCheckPoint -> CheckPointGuts
                                                                                              -> XLogFlush
											      -> SyncPostCheckPoint
											      
    archiver
    main -> SubPostmasterMain -> AuxiliaryProcessMain -> PgArchiverMain -> pgarch_MainLoop -> pgarch_ArchiverCopyLoop
    

*** postgresql数据库目录
    | 文件                 | 描述                               |
    |----------------------+------------------------------------|
    | PG_VERSION           | 包含PostgreSQL主版本号             |
    | pg_hba.conf          | 控制PostgreSQL客户端认证           |
    | pg_indent.conf       | 控制PostgreSQL用户名映射           |
    | postgresql.conf      | 保存数据库相关的配置参数           |
    | postgresql.auto.conf | 存储使用ALTER SYSTEM修改的配置参数 |
    | postmaster.opts      | 记录服务器上次启动的命令行选项     |
    | base/                | 每个数据库对应的子目录都存储在些   |
    | global/              | 数据库集簇范畴的表                 |
    | pg_commit_ts/        | 事务提交的时间戳数据               |
    | pg_clog/             | 事务提交状态数据                   |
    | pg_dynshmem/         | 动态共享内存子系统中使用的文件     |
    | pg_logical/          | 逻辑解码的状态数据                 |
    | pg_multixact/        | 多事务状态数据                     |
    | pg_notify/           | LISTEN/NOTIFY状态数据              |
    | pg_repslot/          | 复制槽数据                         |
    | pg_serial/           | 已提交的可串行化事务相关信息       |
    | pg_snapshots/        | 导出快照                           |
    | pg_stat/             | 统计子系统的永久文件               |
    | pg_stat_tmp/         | 统计子系统的临时文件               |
    | pg_subtrans/         | 子事务状态数据                     |
    | pg_tblspc/           | 指向表空间的符号链接               |
    | pg_twophase/         | 两阶段事务的状态文件               |
    | pg_wal/              | WAL段文件                          |

*** 进程管理
    | 进程                 | 描述                                                        |
    |----------------------+-------------------------------------------------------------|
    | background writer    | 进程将shared buffer pool 中的脏数据写到磁盘，检查点总能触发 |
    | checkpointer         | 检查点会触发产生这个进程                                    |
    | autovacuum launcher  | 为vacuum process周期性的调用autovacuum work process         |
    | wal writer           | 周期性的从wal buffer刷新数据到磁盘                          |
    | statistics collector | 收集统计信息进程                                            |
    | logging collector    | 将错误信息写入到日志                                        |
    | archiver             | 将日志归档的进程                                            |

** 系统表
   | 表名                    | 用途                                   |
   |-------------------------+----------------------------------------|
   | pg_aggregate            | 聚集函数                               |
   | pg_am                   | 关系访问方法                           |
   | pg_amop                 | 访问方法操作符                         |
   | pg_amproc               | 访问方法支持函数                       |
   | pg_ttrdef               | 列默认值                               |
   | pg_authid               | 表列(属性)                             |
   | pg_auth_members         | 认证标识符成员关系                     |
   | pg_cast                 | 转换(数据类型转换)                     |
   | pg_class                | 表，索引，序列，视图                   |
   | pg_collation            | 排序规则                               |
   | pg_constraint           | 检查约束，唯一约束，主键约束，外键约束 |
   | pg_conversion           | 编码转换信息                           |
   | pg_database             | 本数据库集簇中数据库                   |
   | pg_db_role_setting      | 每角色和每数据库中的设置               |
   | pg_default_acl          | 对象精工的默认权限                     |
   | pg_depend               | 数据库对象间的依赖                     |
   | pg_description          | 数据库对象上的描述或注释               |
   | pg_enum                 | 枚举标签和值定义                       |
   | pg_event_trigger        | 事件触发器                             |
   | pg_extension            | 已安装扩展                             |
   | pg_foreign_data_wrapper | 外部数据库包装器定义                   |
   | pg_foreign_server       | 外部服务器定义                         |
   | pg_foreign_table        | 外部表信息                             |
   | pg_index                | 索引信息                               |
   | pg_inherits             | 表继承层次                             |
   | pg_init_privs           | 对象初始特权                           |
   | pg_language             | 编写函数的语言                         |
   | pg_largeobject          | 大对象的数据页                         |
   | pg_largeobject_metadata | 大对象的元数据                         |
   | pg_namespace            | 模式                                   |
   | pg_opclass              | 访问方法操作符类                       |
   | pg_operator             | 操作符                                 |
   | pg_opfamily             | 访问方法操作符类                       |
   | pg_partitioned_table    | 表的分区键的信息                       |
   | pg_pltemplate           | 过程语言的模板数据                     |
   | pg_policy               | 行安全策略                             |
   | pg_proc                 | 函数和过程                             |
   | pg_publication          | 用于逻辑复制的发布                     |
   | pg_publication_rel      | 发布映射的关系                         |
   | pg_range                | 范围类型的信息                         |
   | pg_replication_origin   | 已注册的复制源                         |
   | pg_rewrite              | 查询重写规则                           |
   | pg_seclabel             | 数据库对象上的安全标签                 |
   | pg_sequence             | 有关序列的信息                         |
   | pg_shdepend             | 共享对象上依赖                         |
   | pg_shdescription        | 共享对象上的注释                       |
   | pg_shseclable           | 共享数据库对象上的安全标签             |
   | pg_statistic            | 规划器统计                             |
   | pg_statistic_ext        | 扩展的规划器统计信息                   |
   | pg_statistic_ext_data   | 扩展的规划器统计信息                   |
   | pg_subscription         | 逻辑复制订阅                           |
   | pg_subscription_rel     | 订阅的关系状态                         |
   | pg_tablespace           | 本数据库集簇内的表空间                 |
   | pg_transform            | 转换                                   |
   | pg_trigger              | 触发器                                 |
   | pg_ts_config            | 文本搜索配置                           |
   | pg_ts_config_map        | 文本搜索配置的记号映射                 |
   | pg_ts_dict              | 文本搜索字典                           |
   | pg_ts_parser            | 文本搜索分析器                         |
   | pg_ts_template          | 文本搜索模板                           |
   | pg_type                 | 数据类型                               |
   | pg_user_mapping         | 将用户映射到外部服务器                 |




** 系统视图
   | 视图名称                        | 用途                         |
   |---------------------------------+------------------------------|
   | pg_available_extensions         | 可用的扩展                   |
   | pg_available_extension_versions | 所有版本的扩展               |
   | pg_config                       | 编译时配置参数               |
   | pg_cursors                      | 打开的游标                   |
   | pg_file_settings                | 配置文件内容摘本             |
   | pg_group                        | 数据库用户组                 |
   | pg_hba_file_rules               | 客户端认证配置文件内容的摘要 |
   | pg_indexes                      | 索引                         |
   | pg_locks                        | 当前保持或者等待的锁         |
   | pg_matviews                     | 物化视图                     |
   | pg_policies                     | 策略                         |
   | pg_prepared_statements          | 预备好的语句                 |
   | pg_prepared_xacts               | 预备好的事务                 |
   | pg_publication_tables           | publication和它们相关的表    |
   | pg_replication_origin_status    | 复制槽信息                   |
   | pg_roles                        | 数据库角色                   |
   | pg_rules                        | 规则                         |
   | pg_seclabels                    | 安全标签                     |
   | pg_sequences                    | 序列                         |
   | pg_settings                     | 参数设置                     |
   | pg_shadow                       | 数据库用户                   |
   | pg_stats                        | 规划器统计信息               |
   | pg_stat_ext                     | 扩展的计划器统计信息         |
   | pg_tables                       | 表格                         |
   | pg_timezone_abbrevs             | 时区简写                     |
   | pg_timezone_names               | 时区名字                     |
   | pg_user                         | 数据库用户                   |
   | pg_user_mappings                | 用户映射                     |
   | pg_views                        | 视图                         |

** 数据库临控视图
   动态统计视图
   | 视图名称                      | 说明                                                                  |
   |-------------------------------+-----------------------------------------------------------------------|
   | pg_stat_activity              | 每个服务器进程一行，显示与那个进程的当前活动相关信息                  |
   | pg_stat_replication           | 每个WAL发送进程一个，显示关到该发送进程连接的后备服务器的复制统计信息 |
   | pg_stat_wal_receiver          | 显示来自WAL接收器所连接服务器的有关该接收器的统计信息                 |
   | pg_stat_subscription          | 每个订阅至少一行，显示有关该订阅的工作者信息                          |
   | pg_stat_ssl                   | 每个连接一行，显示在这个连接上使用的SSL的信息                         |
   | pg_stat_gssapi                | 每个连接有一行，显示关于GSSAPI验证和加密的信息                        |
   | pg_stat_progress_analyze      | 显示每个ANALYZE的后端，显示当前的进度                                 |
   | pg_stat_progress_create_index | 每个后台运行create index或reindex的后端都有一个，显示当前的进度       |
   | pg_stat_progress_vacuum       | 每个运行VACUUM的后端一行，显示当前的进程                              |
   | pg_stat_progress_cluster      | 每个运行着CLUSTER或VACUUM FULL的后端一行，显示当前的进度              |
   | pg_stat_progress_basebackup   | 每个WAL发送者进程的行显示一个基础备份，显示当前进度                   |

   已收集统计信息的视图
   | 视图名称                    | 说明                                                                   |
   |-----------------------------+------------------------------------------------------------------------|
   | pg_stat_archiver            | 显示有关WAL归档进程活动的统计信息                                      |
   | pg_stat_bgwriter            | 显示有关后台进程的活动的统计信息                                       |
   | pg_stat_database            | 显示数据库范围的统计信息                                               |
   | pg_stat_database_conflicts  | 显示数据库范围的统计信息，与后备服务器的恢复过程发生冲突而被取消的查询 |
   | pg_stat_all_tables          | 当前数据库中的每个表，显示有关访问指定表的统计信息                     |
   | pg_stat_sys_tables          | 只显示系统表                                                           |
   | pg_stat_user_tables         | 只显示用户表                                                           |
   | pt_stat_xact_all_tables     | 计数动作只在当前事务内发生                                             |
   | pg_stat_xact_sys_tables     | 显示系统表的事务计数                                                   |
   | pg_stat_xact_user_tables    | 显示用户表的事务计数                                                   |
   | pg_stat_all_indexs          | 显示与访问指定索引有关的统计信息                                       |
   | pg_stat_sys_indexes         | 只显示系统表上的索引                                                   |
   | pg_stat_user_indexes        | 只显示用户表上的索引                                                   |
   | pg_statio_all_tables        | 显示有关在指定表上I/O的统计信息                                        |
   | pg_statio_sys_tables        | 只显示系统表                                                           |
   | pg_statio_user_tables       | 只显示用户表                                                           |
   | pg_statio_all_indexes       | 显示与指定索引上的I/O有关的统计信息                                    |
   | pg_statio_sys_indexes       | 只显示系统表上的索引                                                   |
   | pg_statio_user_indexes      | 只显示用户表的索引                                                     |
   | pg_statio_all_sequences     | 显示与指定列上的I/O有关的统计信息                                      |
   | pg_statio_sys_sequences     | 只显示系统序列                                                         |
   | pg_statio_user_seqences     | 只显示用户序列                                                         |
   | pg_stat_user_functions      | 显示与执行该函数有关的统计信息                                         |
   | pg_stat_xact_user_functinos | 只显示在当前事务的该函数的有关信息                                     |
   | pg_stat_slru                | 每个SLRU一行，显示操作的统计信息                                       |


** 额外提供的模块
   | 模块名             | 用途                                                       |
   |--------------------+------------------------------------------------------------|
   | adminpack          | 提供一些支持函数，例如服务器日志文件的远程管理等           |
   | amcheck            | 提供的函数让用户能难关系结构的一致性。                     |
   | auto_explain       | 自动记录慢速语句的查询执行计划                             |
   | bloom              | 布鲁姆过滤器索引                                           |
   | btree_gin          | 提供实现等价行为的GIN操作符                                |
   | btree_gist         | 提供实现等价行为的GiST索引的操作符                         |
   | citext             | 提供一种大小写不敏感的字符串类型                           |
   | cube               | 提供一种数据类型cube来表示多维立方体                       |
   | dblink             | 支持一个数据库会话中连接到其他PostgreSQL数据库的模块       |
   | dict_int           | 附加全文搜索词典模板，控制整数的索引                       |
   | dict_xsyn          | 将词替换为它们的同义词分组                                 |
   | earthdistance      | 提供两种不同的方法来计算地球表面的大圆距离                 |
   | file_fdw           | 提供外部数据包装器，用来访问服务器的文件系统中的数据       |
   | fuzzystrmatch      | 提供多个函数来判断字符之间的相似性和距离                   |
   | hstore             | 用来在一个单一PostgreSQL值中存储键值对                     |
   | intagg             | 提供一个整数聚集器以及一个枚举器                           |
   | intarray           | 提供了有用的函数操作符来操纵不含空值的整数数组             |
   | isn                | 为国际产品标准提供数据类型                                 |
   | lo                 | 提供管理大对象的支持，包含数据类型lo和触发器lo_manage      |
   | ltree              | 用于表示存储在一个层次树状结构中的数据的标签以及搜索功能   |
   | pageinspect        | 提供的函数可以从低层次观察数据库页面内容                   |
   | passwordcheck      | create或alter设置用户时，它会检查用户口令                  |
   | pg_buffercache     | 实时检查共享缓冲区                                         |
   | pgcrypto           | 提供了密码函数                                             |
   | pg_freespacemap    | 检查空闲空间映射，提供了pg_freespace函数                   |
   | pg_prewarm         | 将关系数据载入到操作系统缓冲区或者PostgreSQL缓冲区         |
   | pgrowlocks         | 提供一个函数显示一个指定表的行锁信息                       |
   | pg_stat_statements | 追踪服务器所执行的所有SQL语句的执行统计信息                |
   | pgstattuple        | 获得元组层的统计信息                                       |
   | pg_trgm            | 用于决定基于trigram匹配的字母数字文本相似度的函数和操作符  |
   | pg_visiblity       | 提供一种检查一个表的可见性映射以及页级别的可见性信息       |
   | postgres_fdw       | 用来访问存储在外部PostgreSQL服务器中数据                   |
   | seg                | 表示线段或浮点区间实现了一种数据类型seg                    |
   | sepgsql            | 基于SELinux安全策略的支持基于标签强制访问控制模块          |
   | spi                | 提供使用服务器编程接口和触发器的例子                       |
   | sslinfo            | 提供当前客户端提供的SSL证书的有关信息                      |
   | tablefunc          | 多个返回表的函数                                           |
   | tcn                | 提供一个触发器函数，通知监听者有关它所附着的任意表上的改变 |
   | test_decoding      | 一个逻辑解码输出插件的例子                                 |
   | tsm_system_rows    | 提供了表采样方法SYSTEM_ROWS                                |
   | tsm_system_time    | 提供了表采样方法SYSTEM_TIME                                |
   | unaccent           | 一个文本搜索字典，能从词位中移除重音                       |
   | uuid_ossp          | 产生通用唯一标识符                                         |
   | xml2               | 提供XPATH查询和XSLT功能                                                    |
   

** 分布式和集群

   主从部署
   
   
   分布式部署
   使用ciuts插件进行分布式扩展
   #+begin_src sh
     git clone --depth=1
     make install
   #+end_src
   设置preload_shared_library参数为citus
   重启postgresql
   #+begin_src sql
     create extension citus;
   #+end_src
   即可完成

   
* mariadb
** 源码分析
   | 目录          | 说明                                                           |
   |---------------+----------------------------------------------------------------|
   | BUILD         | 内含在各个平台，各种编译器下进行编译的脚本                     |
   | client        | 客户端工具，如mysql, mysqldump, mysqladmin                     |
   | dbug          | 提供一些调试用的宏定义                                         |
   | extra         | 提供innochecksum, resolveip等额外的小工具                      |
   | include       | 包含的头文件                                                   |
   | libmysqld     | 生成libmysqld.so库文件                                         |
   | libservices   | 新加目录，实现了打印功能                                       |
   | man           | 手册页                                                         |
   | mysql-test    | mysqld的测试工具                                               |
   | mysys         | 为跨平台设计，实现了一套常用的数据结构和算法，如string, hash等 |
   | mysys_ssl     | 封装了AES, MD5, SHA等加密算法                                  |
   | pcre          | perl库                                                         |
   | plugin        | mysql以插件形式实现的部分功能                                  |
   | scripts       | 提供脚本工具，如mysql_install_db, mysqld_safe, mysqld_multi    |
   | sql           | mysql主要代码，将会生成mysqld文件，main函数在sql/main.cc里     |
   | sql-bench     | 评测代码                                                       |
   | sql-common    | 存放部分服务器端和客户端都会用到的代码                         |
   | storage       | 存储引擎所在目录，如myisam,innodb,spider等                     |
   | support-files | my.cnf示例配置文件及编译所需的一些工具                         |
   | Tests         | 测试文件所在目录                                               |
   | unittest      | 单元测试文件目录                                               |
   | vio           | 虚拟网络IO处理系统，是对不同平台或不同协议的网络通信API封装    |
   | win           | 在windows平台编译所需的文件和一些说明                          |
   | zlib          | zlib压缩算法库                                                 |


   
** Mariadb锁
   latch一般被称为闩锁，因为其要求锁定的时间必须非常短，在InnoDB存储引擎中又可为mutex(互斥量)和
   rwlock(读写锁)，为了保证并发线程操作临界资源的正确性，并且通常没有死锁检测的机制。
   lock的对象是事务，用来锁定的是数据库中对象，如表，页，行。并且一般lock对象仅在事务commit或
   rollback进行释放。
   |          | lock                                | latch                                |
   |----------+-------------------------------------+--------------------------------------|
   | 对象     | 事务                                | 线程                                 |
   | 保护     | 数据库内容                          | 内存数据结构                         |
   | 持续时间 | 整个事务过程                        | 临界资源                             |
   | 模式     | 行锁，表锁，意向锁                  | 读写锁，互斥量                       |
   | 死锁     | 通过waits-for graph, time out等机制 | 无死锁检测与处理机制，仅通过应用程序 |
   |          | 进行死锁检测与处理                  | 加锁的顺序，保证无死锁发生           |
   | 存在于   | Lock Manager的哈希表中              | 每个数据结构的对象中                           |


   锁问题
   1. 脏读
      在不同的事务下，当前事务可以读到另外事务提交的数据。
   2. 不可重复读
      是指在一个事务内多次读取同一数据集合。
   3. 丢失更新
      一个事务的更新操作会被另一个事务的更新操作所覆盖，从而导致数据的不一致。
   4. 死锁
      两个或两个以上的事务在执行过程中，因争执资源而造成的一种互相等待的现象。若无外力作用，事务将无
      法推进下去。

** Mariadb日志
   1. 错误日志
      错误日志记录文件对MariaDB的启动，运行，关闭过程进行了记录，以及所有的错误信息，一些警告或正
      确的信息
   2. 慢查询日志
      在MariaDB启动设置一个阈值，并将运行时间超过该值的所有SQL语句都记录到慢查询日志文件中，该参
      数可以通过long_query_time进行设置
   3. 查询日志
      记录了所有对MariaDB数据库请求的信息，无论这些请求是否得到正确的执行
   4. 二进制日志
      记录了对MariaDB数据库执行更改的所有操作，但不包括SELECT和SHOW这类操作，它的主要作用如下
      恢复，某些数据恢复需要二进制日志
      复制，通过复制和执行二进制日志使一台远程的MariaDB数据库与一台MariaDB进行实时同步
      审计，用户可以通过二进制日志中的信息进行审计，判断是否是攻击
   5. 重做日志
      当实例或介质失败时，InnoDB存储引擎会使用重做日志恢复到掉电前的时刻
   
** Mariadb事务
   事务会把数据库从一种一致状态转换为另一种一致状态，可以确保要么所有修改都已经保存了，要么所有修改都不
   保存
   1. 原子性(atomicity)
      原子性指整个数据库事务不是可分割的工作单位，只有使事务中所有的数据库操作都执行成功，才算整个事务
      成功，事务中任何一个SQL语句执行失败，已经执行成功的SQL语句也必须撤销，数据库状态应该退回到执行
      事务前的状态
   2. 一致性(consistency)
      一致性指事务将数据库从一种状态转变为下一种一致的状态，事务是一致性的单位，如果事务中的某个动作失
      败了，系统可以自动撤销事务－－返回初始化的状态
   3. 隔离性(isolation)
      事务的隔离性要求每个读写事务的对象对其他事务的操作对象能相互离开，即该事务提交前对其他事务都不可
      见，通过使用锁来实现
   4. 持久性(durability)
      事务一旦提交，其结果就是永久性的，即使发生宕机等故障，数据库也能将数据恢复，需要注意，只能从事务
      本身的角度来保证结果的永久性。


*** 事务的实现
   重做日志用来实现事务的持久性，即事务ACID中的D，其中由两部分组成：一是内存中的重做日志缓冲(redo log buffer)
   其是易失的，二是重做日志文件(redo log file)，其是持久的，redo通常是物理日志，记录的是页的物理修改操作，
   undo是逻辑日志，根据每行记录进行记录。
   redo组成
   log block
   [[./images/QXiQxi.png]]


   [[./images/7s8nrT.png]]


   log group为重做日志组，其中有多个重做日志组，只是一个逻辑上的概念，由多个重做日志文件组成，每个log group
   中的日志文件大小是相同的
   重做日志文件中存储的就是之前是在log buffer中保存的log block，因此其也是根据块方式进行物理存储的管理，每个
   块的大小与log block一样，同样为512字节，在InnoDB存储引擎运行过程中，log buffer根据一定的规则将内存中的
   log block刷新到磁盘。
   [[./images/7qkVhD.png]]
   
   重做日志格式
   [[./images/UQ0EMI.png]]

   [[./images/Ls6WEP.png]]

   undo日志设计
   
   [[./images/JCcdWE.png]]



   purge

   [[./images/6fy5Vo.png]]


** innodb设计
   
*** 架构设计
    InnoDB存储引擎有多个内存块，可以认为这些内存块组成了一个大的内存池，负责如工作
    1. 维护所有进程/线程需要访问的多个内部数据结构
    2. 缓存磁盘上的数据，方便快速地读取，同时缓存磁盘数据文件之前的修改
    3. 重做日志缓冲


    后台线程的主要作用是负责刷新内存池中的数据，保证缓冲中的内存缓存的是最近的数据，此外将已修改的
    数据文件刷新到磁盘文件，同时保证在数据勯发生异常情况下InnoDB能恢复到正常状态。
    * Master Thread
      主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性，包括脏页的刷新，合并插入缓冲，UNOD
      页的回收
    * IO Thread
      负责IO请求的回调处理
    * Purge Thread
      事务提交后，其使用的undolog可能不再需要，因此需要PurgeThread来回收已经使用并分配的undo页
    * Page Cleaner Thread
      之前版本中脏页的刷新操作都放入到单独的线程中完成，减轻原Master Thread的工作及对用户查询线
      程的阻塞，提高引擎的性能


    内存
    * 缓冲池
      是一块内存区域，通过内存的速度来弥补磁盘速度较慢对数据库性能的影响
      读取页操作，首先将从磁盘读到的页存放在缓冲池中，这个过程称为将页"FIX"在缓冲池中，下一次再
      读相同的页时，首先判断该页是否在缓冲池中，若在，则该页被命中，直接读取，否则从磁盘读取
      修改操作，先修改在缓冲池中的页，然后再以一定的频率刷新到磁盘上，页从缓冲池刷新回磁盘的操作
      并不在每次页发生更新时触发，通过Checkpoint机制刷新回磁盘
      缓冲池中缓存的数据页类型有：索引页，数据页，undo页，插入缓冲，自适应哈希索引，InnoDB存储
      的锁信息，数据字典信息等
    * LRU List, Free List和Flush List
      数据库中的缓冲池是通过LRU算法进行管理的，即最频繁使用的页在LRU列表的前端，而最少使用在页
      在LRU列表的尾端，当缓冲池不能存放读取到的新页时，将首先释放LRU列表中的尾端的页
    * 重做缓冲日志
      InnoDB首先将重做日志信息先放入到这个缓冲区，然后按一定频率将其刷新到重做日志文件，只有发
      生如下情况才会进行
      Master Thread 每一秒重做日志缓冲刷新到重做日志文件
      每个事务提交时会将重做日志缓冲刷新到重做日志文件
      当重做日志缓冲剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件
    * 额外的内存池
      对内存管理是通过一种称为内存堆的方法申请，当该区域的内存不够时，会从缓冲池申请


    Checkpoint技术
    InnoDB有两种Checkpoint
    Sharp Checkpoint发生在数据库关闭时将所有的脏页都刷新回磁盘
    Fuzzy Checkpoint则是在运行中使用，只刷新一部分脏页
      


*** 源码目录
    | 目录    | 作用                                                       |
    |---------+------------------------------------------------------------|
    | handler | 继承于MySQL的handler，插件式存储引擎的实现                 |
    | ibuf    | 插入缓冲的实现                                             |
    | include | InnoDB将头文件都统一主在到这个文件夹下                     |
    | lock    | InnoDB存储引擎锁的实现，如S锁，X锁，以及定义锁的一系列算法 |
    | log     | 日志缓冲和重组日志文件的实现。                             |
    | mem     | 辅助缓冲池的实现，用来申请一些数据结构的内存               |
    | mtr     | 事务的底层实现                                             |
    | os      | 封装一些对于操作系统的操作                                 |
    | page    | 页的实现                                                   |
    | row     | 对于各种类型行数据的操作                                   |
    | srv     | 对于InnoDB存储引擎参数的设计                               |
    | sync    | InnoDB存储引擎互斥量的实现                                 |
    | thr     | InnoDB存储引擎封装的可移植的线程库                         |
    | ut      | 工具类                                                     |



*** 表结构
    表空间是InnoDB存储引擎逻辑结构的最高层，所有数据都存放在表空间中，表空间又由段，区，页组成，页在
    一些文档中有时也称为块
    表空间由各个段组成，常见的段有数据段，索引段，回滚段等，
    区是由连续页组成的空间，在任何情况下每个区的大小都为1MB，为了保证区中页的连续性，InnoDB存储引擎
    一次从磁盘申请4-5个区。在默认情况下，InnoDB存储引擎页的大小为16KB，即一个区中一共有64个连续的页
    页是InnoDB磁盘管理的最小单位，在InnoDB存储引擎中，常见的页类型有数据页(B-tree Node)，undo页
    (undo Log Page)，系统页(System Page)，事务数据页(Transaction system Page)，插入缓冲位
    图页(Insert Buffer Bitmap)，未压缩的二进制大对象页(Uncompressed BLOB Page)，压缩的二进
    制大对象页(compressed BLOB Page)
    行，InnoDB是面向列的，也就是说按行进行存放的，每个页存放的行记录也是有硬性规定，最多存放
    16KB/2-200记录，即7992行


    
*** 索引(B+树)
    1. 聚集索引
       InnoDB存储引擎表是索引组织表，即表中数据按照主键顺序存放。而聚集索引(clustered index)就是按照每张
       表的主键构造一棵B+树，同时叶子节点中存放的即为整张表的行记录数，也将聚集索引的叶子节点称为数据页。聚
       集索引的这个特性决定了索引组织表中数据也是索引的一部分。同B+树数据结构一样，每个数据页都通过一个双向
       链表进行链接。由于实现实际的数据页只能按照一棵B+树进行排序，因此每张表只能拥有一个聚集索引。
    2. 辅助索引
       也称非聚集索引(Secondary Index)，叶子节点并不包含行记录的全部数据，叶子节点除了包含键值以外，每个
       叶子节点中的索引行还包含了一个书签(bookmark)。用来告诉InnoDB存储引擎哪里可以找到与索引相对应的行
       数据。由于InnoDB存储引擎表是索引组织表，因此InnoDB存储引擎的辅助索引的书签就是相关行数据的聚集索引
       键。
    3. 联合索引
       指对表上的多个列进行索引，且联合索引的键值的数量不是1,而是大于等于2,且对第二个键值进行了排序处理
    4. 覆盖索引
       指从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中记录，它的好处在于辅助索引不包含整行记录
       的所有信息，故其大小要远小于聚集索引，可以减少大量IO操作

** 关键技术

*** 插入缓冲   
   1. Insert Buffer
      对于非聚集索引的插入或更新操作，不是每一次直接插入到索引页中，而是先判断插入的非聚集索引页是否在
      缓冲池中，若在，则直接插入，若不在，则先放入到一个Insert Buffer对象中。数据库这个非聚集索引已
      经插到叶子节点，而实际并没有，只是存放在另一个位置。然后再以一定的频率和情况进行Insert Buffer
      和辅助索引页子节点的merge(节点)操作，这时通常能将多个插入合并到一个操作中，大大提高了对于非聚
      集索引插入的性能。
      Insert Buffer的使用需要同时满足以下两个条件
      索引是辅助索引
      索引不是唯一的
   2. Change Buffer
      可以将其视为Insert Buffer的升级，InnoDB存储引擎可以对DML操作：INSERT，DELETE，UPDATE都进
      行缓冲，分别是：Insert Buffer, Delete Buffer, Purge Buffer
      对一条记录进行UPDATE操作可能分为两个过程
      将记录标记为已删除
      真正将记录删除
      
   
*** 两次写
    doublewrite由两部分组成，一部分是内存中的doublewrite buffer，大小为2MB，另一部分是物理磁盘上
    共享空间中连续的128个页，即2个区(extent)，大小同样为2MB。在对缓冲池的脏页进行刷新时，并不直接写
    磁盘，而是会通过memcopy函数将脏页先复制到内存中的doublewrite buffer，之后通过doublewrite
    buffer再分两次，每次1MB顺序地写入共享表空间的物理磁盘上，然后马上调用fsync函数，同步磁盘，避免
    缓冲写带来的总是，这个过程中，因为doublewrite页是连续的，因此这个过程是顺序的
    
    
*** 异步IO
   用户在发出一个IO请求后立即再发出另一个IO请求，当全部IO请求发送完毕后，等待所有IO操作完成，这是
    AIO。另一个优势是可以进行IO Merge操作，也就是将多个IO合并为1个IO。
    
*** 自适应哈希
    InnoDB存储引擎会临控对表上各索引页的查询。如果观察到建立哈希索引可以带来速度提升，而建立哈希索引，
    称之为自适应哈希索引(Adaptive Hash Index)，AHI是通过缓冲池的B+树页构造而来，因此建立的速度很
    快，而且不需要对整张表构建哈希索引。InnoDB存储引擎会自动根据访问的频率和模式来自动地为某些热点页
    建立哈希索引。
    
*** 刷新邻接页
    当刷新一个脏页时，InnoDB存储引擎会检测该页所在区(extent)的所有页，如果是脏页，那么一起进行刷新，
    通过AIO可以将多个IO写入操作合并为一个IO操作，因此该机制在传统机械磁盘下有着显著的优势。

** 编译
   #+begin_src sh
     mkdir build && cd build
     cmake ../
     make -j 4 
   #+end_src

   调试
   #+begin_src sh
     mkdir build && cd build
     cmake ../ -DBUILD_RELEASE_TYPE=Debug
     make -j 4
     cd ../ && gdb attach ./build/bin/mysqld
   #+end_src


   
  
* sqlite3

** 架构设计
*** 整体设计
   sqlite通过将sql编译成字节码，在虚拟机中运行。sqlite3_prepare_v2()与相关的接口函数把
   sql转换到字节码，sqlite3_stmt对象保存了字节码程序实现单条sql语句。sqlite3_step()通过
   把字节码在虚拟机中运行，直到所有工作完成，或者执行一条语句返回结果。
  
*** 接口
    大多数的C语言接口都在main.c,legacy.c和vbdeapi.c三个文件中。sqlite3_get_table()相关
    实现在table.c文件中，而sqlite3_mprintf()则是在printf.c文件中。sqlite3_complete()实
    现在complete.c中，最后TCL相关接口则是在tclsqlite.c中
    为了避免变量名冲突，所有sqlite3库中相关函数全部使用sqlite3作为前缀。所有开放给外部
    的相关接口函数全部使用sqlite3_作为前缀。插件API有时候添加插件名和下划线，比如
    sqlite3rbu_或sqlite3session_。
*** 分词器
    当一条sqlite语句开始执行时，道先将它发送到分词器。分词器切分sql语句解析为单词，分词
    的相关实现在tokenize.c文件中
    注意在本设计中，分词器实际上就是解析器，可能人们比起其他方法，更熟悉yacc和bison，分
    词器比较解析器更好，因为这是线程安全，而且运行更快
*** 解析器
    解析器使得上文的分词有意义，SQLite的使用Lemon分析器生成，Lemon做的工作和YACC/BISON
    是一样的，但是它使用了不同的输入语法，且它更准确。Lemon生成的分析器同样也是可重用的
    且是线程安全的。Lemon定义了非终端析构函数的概念，为了在语法错误出现时不出现内存泄漏
    ，相关的语法定义文件在parse.y
    因为Lemon是一个开发工具，它的完整代码在SQLite的tools目录下
   
*** 中间代码生成
    在通过解析器把单词转换为解析树，代码生成器会分析解析树，接着会把sql语句转换成中间代
    码运行。sqlite3_stmt对象保存了相关字节码。相关的实现文件有许多attach.c,auth.c,build.c
    delete.c,expr.c,insert.c,pragma.c,select.c,trigger.c,update.c,vacuum.c,where.c,
    wherecode.c以及whereexpr.h。在这些文件中有许多有趣的操作，expr.c为表达式生成中间代码
    where*.c则是为where以及相关的select,update,delete子句生成中间代码。其他的sql语句的
    实现则是在build.c文件中。auth.c文件则实现了sqlite3_set_authorizer()
    在代码生成中，尤其中where*.c逻辑，在select.c中有时候名为query planner。对于任一sql
    语句，可能会有成千上万的不同的算法计算结果。而query planner则是可以从无数种选择中
    找到适合的选择
*** 字节码引擎
    字节码是通过中间代码生成且运行在虚拟机中。虚拟机相关的定义全部在vdbe.c文件中，而vdbe.h
    文件定义了虚拟机与其他sqlite功能之间的接口，而vbdeInt.h则定义了相关的数据结构以及
    虚拟机的相关私有结构，其他的vdbe*.c文件则定义了虚拟机的函数。vdbeaux.c文件则是包含
    相关的工具函数用来构造虚拟机。vdbeapi.c文件是对外的接口，比如sqlite3_bind_int()和
    sqlite3_step()。单个值在内部的对象名为Mem，通过vdbemem.c中实现的。
    sqlite实现sql函数通过回调函数，甚至中内置的sql函数也是如此。大多数sqlite内部函数都能
    在func.c文件中实现。时间和时间的转换函数则是在date.c中实现。一些函数如coalesce()和
    typeof()则是通过中间代码生成字节码生成
*** B-树
    sqlite数据库是通过B-树保存在磁盘上，它的实现保存在btree.c文件中，分隔B-树用来分别保
    存表对象和索引对象。所有的B-树都保存在同一个磁盘文件中。
    B-树子系统的接口和sqlite库定义在btree.h中
*** 页缓存
    B-树模块从磁盘请求固定大小的页。页的默认大小是4096位，它的取值范围在512到65536之间，
    页缓存主要是为了读和写，缓存页，同时也提供回滚和原子提交以及锁住数据库文件。B-树从
    从页缓冲请求特定的页，当请求写入页或提交或回滚时会进入通知，页缓存会处理快速，安全
    高效的处理请求。
    页缓存相关实现在pager.c文件中，WAL模式的逻辑在wal.c文件中，实时缓存实现则是在pcache.c
    和pcache1.c文件。页缓存和其余的相关操作则在pager.h中
*** 操作系统接口
    为了在不同操作系统之间进行移植，SQLite使用了VFS抽象，每个VFS对象提供了打开，读写，
    关闭对磁盘的操作，以及其他特定操作，比如获取当前时间，内置的伪随机数生成器。SQLite
    使用VFSec对接unix和Windows
*** 工具函数
    内存分配，字符串比较函数，数字与字符串之间的转换函数，以及其他的函数保存在util.c中，
    用来保存符号表的hash表实现在hash.c文件，而utf.c文件中则包含字符编码相关的函数。SQLite
    在自己实现的printf()函数在printf.c文件中以及自己实现的伪随机数生成器在random.c中
*** 测试代码
    在src/目录是所有以test打头的文件所有全部是测试文件
** 代码设计
   sqlite3的main函数保存在shell.c.in文件中
   首先进行对sqlite3的data进行初始化shell工具中的相关变量，比如提示符，分隔符等
   sqlite3_initialize()函数则是sqlite3数据库进行初始化
   sqlite2GlobalConfig是一个宏，它实际指的是gloab.c中的sqlite3Config变量，
   接着调用sqlite3MutexInit()函数初始化mutex子系统，根据不同的平台设置不同的mutex，unix中使用
   pthread
   调用sqlite3MallocInit()初始化
   

  
* redis
  
* clickhouse
  
* mongodb
  
* trino
  
* neo4j
  
* trino
  
* solr





