* 软件管理命令
 
  | 命令                | 说明             |
  |---------------------+------------------|
  | pkg info            | 显示已安装的软件 |
  | pkg install package | 安装软件         |
  | pkg search package  | 搜索软件包       |
  | pkg delete package  | 删除软件包       |
  | pkg autoremove      | 删除相关依赖     |
  |                     |                  |

  
  
** 系统更新
   #+begin_src sh
     freebsd-update fetch install  # 更新软件包
     freebsd-update upgrade -r system-version # 更新系统
   #+end_src

** 从源码编译安装
   获取ports源，
   #+begin_src sh
     portsnap fetch && portsnap extract  && portsnap update
   #+end_src

   从/usr/ports安装vim，同时它会弹出对话设置相关选项，且它会自动解决相关依赖
   #+begin_src sh
     cd /usr/ports/editors/vim
     make install
   #+end_src
   也能使用pkg 进行删除
   

* 内核功能
  与硬件无关的功能
  * 基本的内核功能:定时器和系统时钟处理机制，描述符管理，以及进程管理
  * 支持内存管理：调页(paging)和交换(swapping)机制
  * 通用系统接口: I/O，控制，在描述符上执行的多重复用(multiplexing)操作
  * 文件系统: 文件，目录，路径名转换，文件加锁以及I/O缓冲管理
  * 终端处理: 伪终端(pseudo-terminal)接口和终端行规程(line discipline)
  * 进程间通信功能: 套接口(socket)
  * 支持网络通信: 通信协议和基本网络功能


  与硬件相关的代码
  * 底层的系统启动动作
  * 陷阱(trap)和出错的处理
  * 进程在运行时刻(run-time)上下文的底层操作
  * 对硬件设备的配置和初始化
  * 对I/O设备在运行时刻的支持


* 源代码分析

  
** 启动分析
   freebsd的入口函数在sys/kern/init_main.c中，命名为mi_startup()，该函数主要是把所有的SYSINIT模块全部加载到，相关的
   内存，它通过比较subsystem和order进行排序，相关的模块次序则由sys/sys/kernel.h中的sysinit_sub_id的枚举进行控制
   接着依次调用相关的初始化函数
   基本服务
   | 模块                    | 第一个例程               |
   |-------------------------+--------------------------|
   | SI_SUB_MTX_POOL_STATIC  | mtx_pool_setup()         |
   | SI_SUB_LOCKMGR          | lockngr_init()           |
   | SI_SUB_VM               | vm_mem_init()            |
   | SI_SUB_KMEM             | kmeminit()               |
   | SI_SUB_KVM_RSRC         | vmrnapentry_rsrc_init()  |
   | SI_SUB_WITNESS          | witness_initialize()     |
   | SI_SUB_MTX_POOL_DYNAMIC | mtx_pool_setup_dynamic() |
   | SI_SUB_LOCK()           | selectinit()             |
   | SI_SUB_EVENTHANDLER     | eventhandler_init()      |
   | SI_SUB_KLD              | linker_init()            |
   | SI_SUB_CPU              | cpu_startup()                         |

   初始化内核进程
   | 模块                 | 第一个例程       |
   |----------------------+------------------|
   | SI_SUB_INTRINSIC     | proc0_init()     |
   | SI_SUB_VM_CONF       | vm_init_limits() |
   | SI_SUB_RUN_QUEUE     | runq_init()      |
   | SI_SUB_KTRACE        | ktrace_init()    |
   | SI_SUB_CREATE_INIT   | create_init()    |
   | SI_SUB_SCHED__IDLE() | idle_setup()     |

   初始化设备模块
   | 模块            | 第一个例程                       |
   |-----------------+----------------------------------|
   | SI_SUB_MBUF     | mbuf_init()                      |
   | SI_SUB_INTR     | intr_init()                      |
   | SI_SUB_SOFTINTR | start_softintr(), start_netisr() |
   | SI_SUB_DEVFS    | devry_init(), devs_set_ready()   |
   | SI_SUB_INIT_IF  | if_init()                        |
   | SI_SUB_DRIVERS  |                                  |
   | SI_SUBCONFIGURE | configure_first()                |
   | SI_SUB_VFS      | vfsinit()                        |
   | SI_SUB_CLOCKS   | initclocks()                     |
   | SI_SUB_CLIST    | clist_init()                     |

   启动进程间通信
   | 模块                        | 第一个例程        |
   |-----------------------------+-------------------|
   | SI_SUB_SYSV_SEM             | sysvsem_modload() |
   | SI_SUB_SYSV_SHM             | sysvshm_modload() |
   | SI_SUB_SYSV_MSG             | sysvmsg_modload() |
   | SI_SUB_PROTO_IF             | if_check()        |
   | SI_SUB_PROTO_DOMAIN         | domaininit()      |
   | SI_SUB_PROTO_IFATTACHDOMAIN | if_attachdomain() |

   启动内核线程
   | 模块                  | 第一个例程    |
   |-----------------------+---------------|
   | SI_SUB_INTRINSIC_POST | proc0_post()  |
   | SI_SUB_KTHREAD_INIT   | kick_init()   |
   | SI_SUB_KTHREAD_PAGE   | vm_pageout()  |
   | SI_SUB_KTHREAD_VM     | vm_daemon()   |
   | SI_SUB_KTHREAD_BUF    | buf_daemon()  |
   | SI_SUB_KTHREAD_UPDATE | vnlru_proc()  |
   | SI_SUB_KTHREAD_IDLE   | ald_daemon()  |
   | SI_SUB_SMP            | release_aps() |
   | SI_SUB_RUN_SCHEDULER  | scheduler()              |

   
** 获取源代码
   #+begin_src sh
     cd /usr/src && \
	 svnlite checkout https://svn.freebsd.org/base/head .
   #+end_src
   
** 编译安装内核
   构建环境
   #+begin_src sh
   cp sys/amd64/conf/GENERIC  ./MYKERNEL
   make buildworld KERNCONF=MYKERNEL -DNO_CLEAN
   #+end_src
   编译内核
   #+begin_src sh
   make buildkernel KERNCONF=UFFIE -DNO_CLEAN
   #+end_src
   安装环境及内核
   #+begin_src sh
   sudo make installworld KERNCONF=MYKERNEL
   sudo make installkernel KERNCONF=MYKERNEL
   #+end_src

** 源码目录
   | 目录       | 作用                        |
   |------------+-----------------------------|
   | /bin       | /bin下程序的源码            |
   | /etc       | /etc目录的配置文件          |
   | /include   | /usr/include系统API的头文件 |
   | /kerberos5 | kerberos5框架的源代码       |
   | /lib       | /usr/lib下的库代码          |
   | /libexec   | /usr/libexec程序源码        |
   | /sbin      | /sbin程序源码               |
   | /sys       | 内核源码                    |
   | /usr.bin   | /usr/bin下程序源码          |
   | /usr.sbin  | /usr/sbin下程序源码         |
   | /tests     | freebsd测试用例             |
   | /share     | /usr/share帮助目录          |
   | /contrib   | 第三方程序源码              |
   | /crypto    | 相关的加密解密程序          |
   | /gnu       | GPL声明                     |
   | /release   | 构建freebsd的配置文件                |
   |            |                             |

   
** 虚拟内存
   
*** 调页器
    
* 编程
  
** kqueue模型
   kqueue是BSD中使用的内核事件通知机制，一个kqueue指的是一个描述符，这个描述符会塞等待直到一个特定类型
   和种类的事件发生。用户态的进程(或内核)可以等待这个描述符，因而kqueue提供一种用于一个或多进程同步的
   简单而高效的方法
   kqueue和对应的kevent(表示事件的数据结构)构成了内核异步I/O的基础(因此也实现了POSIX的poll(2)/select(2))
   在用户态，简单地调用kqueue(2)系统调用就可以创建一个kqueue，不需要传任何参数。通过EV_SET宏设置指定事件
   即初始化kevent结构体，调用kevent(2)或kevent64(2)系统调用设置事件过滤器，如果满足过滤器的话则返回(否则
   阻塞)。系统支持一些"预定义"的过滤器
   | 事件过滤器      | 用途                                                                  |
   |-----------------+-----------------------------------------------------------------------|
   | EVFILT_MACHPORT | 监视一个Mach port或一个port组，如果监视的port接收到了一条消息，则返回 |
   | EVILT_PROC      | 监视一个指定PID表示的进程调用execve(2),exit(2),fork(2),wait(2)或      |
   |                 | 被发送信号等事件                                                      |
   | EVFILT_READ     | 如果监视文件，那么当文件指针没有在EOF时返回                           |
   |                 | 如果监视套接字，管道或FIFO，那么当有数据可读时就返回                  |
   | EVFILT_SESSION  | 监视一个审计会话                                                      |
   | EVFILT_SIGNAL   | 监控发给一个进程的特定信号，即使这个信号衩进程忽略                    |
   | EVFILT_TIMER    | 最高能达到纳秒精确度周期定时器                                        |
   | EVFILT_WRITE    | 如果监视文件，那么当文件可以写入时返回                                |
   |                 | 如果监视套接字，管道或FIFO，那么当数据可写入返回                      |
   | EVFILT_VM       | 虚拟内存相关的通知                                                    |
   | EVFILT_VNODE    | 文件(vnode)相关系统调用的过滤器，例如rename(2), delete(2), unlink(2)  |

   通过kevent跟踪某个PID表示的进程的进程级别示例
   #+begin_src c
     void main(int arvc, char **argv)
     {
       pid_t pid;
       int kq;
       int rc;
       int done;
       struct kevent ke;

       pid = atoi(argv[1]);

       kq = kqueue();

       if(kq == -1) { perror("kqueue"); exit(2); }

       EV_SET(&ke, pid, EVFILT_PROC, EV_ADD,
	      NOTE_EXIT | NOTE_FORK | NOTE_EXEC, 0, NULL);

       rc = kevent(kq, &ke, 1, NULL, 0, NULL);
       if(rc < 0) { perror("kevent"); exit(3);}

       done = 0;
       while(!done){
	 memset(&ke, '\0', 1, NULL, 0, NULL);

	 rc = kevent(kq, NULL, 0, &ke, 1, NULL);
	 if(rc < 0) { perror("kevent"); exit(4); }

	 if(ke.fflags & NOTE_FORK)
	   printf("PID %d fork()end\n", ke.ident);

	 if(ke.fflags & NOTE_EXEC)
	   printf("pid %d has exec()ed\n", ke.ident);

	 if(ke.fflags & NOTE_EXIT){
	   printf("pid %d has exited\n", ke.ident);
	   done++;
	 }
       }
     }

	
  

   #+end_src
   

   
* 磁盘操作
  geom是freebsd的磁盘管理框架，相关的磁盘设备文件保存/dev中，在freebsd中磁盘的分区也是作为设备的，它
  为磁盘的I/O请求提供了一个模块化的转换，磁盘I/O请求在内核上层和设备驱动之间来回传递。
  gpart分区程序，为GEOM管理的磁盘进行分区以及格式操作

** 分区扩展  
  #+begin_src bash
     #根分区扩展
     gpart recover nda0
     gpart resize -i partid -a 4k -s size nda0
     growfs /dev/gpt/rootfs
   #+end_src

** 查看磁盘信息
   查看磁盘 
   #+begin_src bash
     geom disk list 
   #+end_src
   查看分区信息
   #+begin_src bash
     gpart show
   #+end_src
   查看分区状态
   #+begin_src bash
     gpart status 
   #+end_src

* 内核模块管理
  内核模块保存目录/boot/kernel
  内核模块一般是驱动和内核的增强功能
  查看模块列表
  #+begin_src sh
  kldstat -d 
  #+end_src
  需要注意它的引用计数，如果它不为1说明它被其他内核模块使用，不移除引用的模块，该模块无法移除

  加载模块
  #+begin_src sh
  kldload <module name>
  #+end_src

  查看模块的详细信息
  #+begin_src sh
  kldstat -h -v -n dtrace 
  #+end_src
  

* dtrace动态追踪
  :PROPERTIES:
  :ID:       o2b:25E4658A-A2F3-4AAB-889D-4054630D1EDC
  :POST_DATE: [2022-04-05 Tue 19:39]
  :BLOG:     myblog
  :POSTID:   73
  :END:

** dtrace是什么
   全称为dynamic traceing，即动态追踪，主要是在操作系统运行态中进行调试。UNIX中的动态追踪技术，是dtrace，也就是所谓的D
   语言，所以相关的UNIX操作系统基本上都有dtarce实现，比如FreeBSD,MacOSX等。
  
** 示例
   #+begin_src sh
   dtrace -l | grep 'syscall.*read'
   #+end_src
   dtrace -l显示所有probes
   每一个probe都可以获取对应的事件数据
   grep从dtrace -l 中搜索。也可以使用dtrace -n 'syscall::*read*:entry，结果是一样的
   输出结果有五个字段，需要注意provider，module，function，probe等字段
   最重要的是provider和probe两个字段，它们稳定的API，大多数工作都可以及通过这些来完成

   #+begin_src sh
   dtrace -n 'dtrace:::BEGIN { printf("Hello FreeBSD\n"); }'
   #+end_src
   该命令会打印Hello FreeBSD，运行该命令，使用Ctrl-C终止
   dtrace:::BEGIN是一个特殊的probe，当dtrace开始的时候触发，可以设置变量并输出
   一个动作可以关联到在{}，该示例在probe触发时调用printf()

   #+begin_src sh
     dtrace -n 'syscall::open*:entry { printf("%s %s", execname, copyinstr(arg0)); }'
   #+end_src
   追踪文件打开事件，显示对应的进程名和路径名
   execname:保存当前进程名字的内置变量，其他内置变量包括pid, tid, ppid
   arg0: 表示是第一个probe参数，syscall提供了entry探针，系统调用的参数的名字为arg0, arg1, ... argN
   open()函数的调用参数为:const char *pathname, int flags, mode_t mode，所以arg0是一个路径指针
   copyinstr():推送用户空间的数据到内核，dtrace就能读取它。此时args0只是一串数字，dtrace需要读取对的数据

   进程执行的系统调用计数
   #+begin_src sh
     dtrace -n 'syscall:::entry { @[execname, probefunc] = count(); }'
   #+end_src
   收集进程进行系统调用的函数信息，输入Ctrl-C时输出结果
   @:代表一个特殊的聚合变量，可以非常方便高效的统计数据
   []:表示聚合多个值，类似于关联数组
   probefunc:这是一个内置变量，提供probe名字，由系统调用提供，保存系统调用的函数名
   count():这是一个聚合函数，非常好用，统计函数调用的次数，保存为execname变量时，该结果通过进程名统计调用频率
   相关结果会在dtrace结束时输出结果，它会显示调用printa()，允许自定义显示
   
   read()函数读取的字节数
   #+begin_src sh
     dtrace -n 'syscall::read:return /execname == "sshd"/ { @ = quantize(arg0); }'
   #+end_src
   统计read函数的系统调用，使用图表输出
   //:它本质上做了过滤。该动作只有在条件成立的情况下才会执行，该示例中仅对；sshd的进程起作用，同时也支持&&, ||
   arg0: 当系统调用完成时，会返回一个值，对于read()函数来说，-1代表出错，其他数据则是成功读取
   @: 与上述示例的借用相同，但没有[]
   quantize(): 这是一个聚合函数，read调用统计作为数据源。count列显示的是read调用时填充的数据大小
   其他聚合函数包含lquantize()，avg()，min()，max()

   计算read()系统调用的时间
   #+begin_src sh
     dtrace -n 'syscall::read:return { self->ts=timestamp;} syscall::read:return /self->ts/ { @=quantize(timestamp-self->ts); self->ts=0;}'
   #+end_src
   统计read()函数所花的时间，输出ASCII图表

   self->:代表线程本地变量，存储在当前线程中，当前示例保存系统调用开始的时间到ts变量中，可以被同一线程的probe引用
   timstamp: 这是高分辨率时钟计数
   /self->ts/: 检查ts变量不为0,确保接下来的代码能够执行，必须保证probe中的变量是有意义的
   self->ts=0: 释放线程本地变量
   
   计算read()函数的CPU时间
   #+begin_src sh
     dtrace -n 'syscall::read:entry { self->vts=vtimestamp; } syscall::read:return /self->vts/ { @["On-CPU us:"]=lquantize((vtimestamp-self->vts)/1000, 0, 10000, 10); self->vts=0; }'
   #+end_src
   统计CPU在read()函数中所花费的时间，输出ASCII图表

   vtimestamp: 当当前线程被CPU执行时，时钟计数器才会计数，当两个时间进行比较时，可以看出阻塞时间和运行时间
   "On-CPU us:": 这是声明输出的一个标签
   luqantize(): 线生quantize函数，它的参数为: value, min, max, step

   统计CPU级别的事件
   #+begin_src sh
     dtrace -n 'proc::: { @probename]=count(); } tick-5s { exit(0); }'
   #+end_src
   统计5秒内进程事件
   proc: proc provider提供了高层次的进程事件，比如进程和线程的创建以及销毁，剩余的:::是空白，它会匹配与proc中的所有probe
   可以通过dtrace -ln 'proc:::'列出
   probename: probe的名字，这是一个内置变量，表示provider名字
   tick-5s: 这是profile:::tick-5s的缩写，该probe会在5秒后触发
   exit(0): 该动作为退出dtrace，返回0

   CPU内核栈的执行例程
   #+begin_src sh
     dtrace -x stackframes=100 -n 'profile-99 /arg0/ { @[stack()]=count(); }'
   #+end_src
   99 Hertz的CPU状态
   -x stackframes=100: 调整栈帧到100,默认为20,这是stack()函数返回的栈帧的大小限制，可以设置更大的值
   profile-99: profile中的一个probe，当所有CPU在99 Hertz时触发
   arg0: profile中的一个参数，这是内核参数计数
   stack(): 返回内核栈状态，作为聚集函数的一个键，用来计数频率

   调度器
   #+begin_src sh
     dtrace -n 'sched:::off-cpu { @[stack(8)]=count(); }'
   #+end_src
   内核栈off-cpu事件计数
   sched: sched:::off-cpu为CPU内核事件触发的probe，有on-cpu，off-cpu，enqueue，dequeue，使用dtrace -ln 'sched:::'即可查询
   off-cpu: 该probe在线程离开CPU时才会触发，它会阻塞事件，比如io等待事件，定时器事件或锁
   stack(5): 内核栈状态，输出8个帧
   off-cpu会在线程上下文中触发，stack()会延迟到线程离开执行
   
   

   TCP连接创建统计
   #+begin_src sh
     dtrace -n 'tcp:::accept-established { @[args[3]->tcps_raddr] = count(); }'
   #+end_src
   被远程地址打开的TCP连接
   tcp: dtrace中为tcp提供的probe事件，以及对协议检查的参数
   accept-established: 当tcp连接成功创建时该probe才会触发
   args[3]->tcps_raddr: arg[0...N]为输入的参数，且都为无符号的int类型，这是dtrace提供的tcp协议信息的参数，在示例中
   args[3]->tcps_raddr保存远程地址的IP字符串，使用dtrace -lnv可以列出相关的参数
   probe的上下文非常重要，如果内核的TCP例程完成了TCP握手，此接收程序并不处on-cpu状态，内置的execname不会输出

   内核trace
   #+begin_src sh
     dtrace -n 'fbt::vmem_alloc:entry { @[curthread->td_name, args[0]->vm_name] = sum(arg1);}'
   #+end_src
   统计调用vmem_alloc的线程，vmem缓存以及请求的字节大小

   fbt: 表示内核函数的进入和返回的相关控制
   curthread: 一个保存当前正在CPU中运行的线程变量(sys/sys/proc.h)，成员可以被引用，就像C，在示例中td_name就是线程名
   args[0]: 进入vmem_alloc()中的第一个参数，触发entry，该数据为vmem_t类型，vm_name为该结构体中成员引用
   arg1: vmem_alloc()的第二个参数vm_size_t类型的引用，它是无符号的int类型，可以及通过args[1]或arg1获取


   
** dtrace单行示例
   
   
*** 版本号
    #+begin_src sh
      # 显示dtrace版本号
      dtrace -v

      # 显示dwatch版本号
      dwatch -v 
    #+end_src

    显示probes
    #+begin_src sh
      # 显示所有probe并且搜索包含foo的项
      dtrace -l | grep foo
      # 根据providers进行统计probe
      dtrace -l | awk '{ print $2 }' | sort | uniq -c | sort -n
      # 显示特定的provider
      dtrace -l -P syscall

      # 显示所有probe且包含foo的项
      dwatch -lr foo
      # 显示唯一的providers
      dwatch -lP
      # 显示特定的provider中的probes
      dwatch -lP syscall
      # 显示唯一的函数
      dwatch -lf
      # 显示所有以read结尾的函数
      dwatch -lf '*read'

    #+end_src

    
*** 系统调用
    #+begin_src sh
      # 追踪使用open函数的进程和文件名
      dtrace -n 'syscall::open*:entry { printf("%s %s", execname, copyinstr(arg0)); }'
      # 通过程序计算系统调用次数
      dtrace -n 'syscall:::entry { @[execname] = count(); }'
      # 统计进行系统调用的函数
      dtrace -n 'syscall:::entry { @[probefunc] = count(); }'
      # 只统计特定进程号为123的进程的系统调用
      dtrace -n 'syscall:::entry /pid == 123/ { @[probefunc] = count(); }'
      # 只统计进程名为nginx的进程的系统调用
      dtrace -n 'syscall:::entry /execname == "nginx" / { @[probefunc] = count(); }'
      # 输出进行系统调用的进程PID和进程名
      dtrace -n 'syscall:::entry { @[pid, execname] = count(); }'
      # 查找进行系统调用的父进程
      dtrace -n 'syscall::read::entry { printf("execname=%s parent_execname=%s, execname, curthread->td_proc->p_pptr->p_comm); }'
      # 
      dtrace -n 'syscall::read:entry { @[execname]=quantize(arg2); }'

      dtrace -n 'syscall::read:entry { @[execname]=quantize(arg1); }'

      dtrace -n 'syscall::read:entry { self->ts=timestamp; } syscall::read:return /self->ts/ { @[execname, "ns"]=quantize(timestamp-self->ts); self->ts=0; }'



    #+end_src

**** 使用dwatch     
     #+begin_src sh
       # 追踪使用open函数的进程
       dwatch -X open

       # 查找进行read函数调用的父进程
       dwatch -R syscall::read::entry

       # 查看进行系统调用的probe 
       dwatch -F syscall 

       # 查看python进程的probe
       dwatch -k 'python*' -F syscall

       # 查看daemon守护进程的probe
       dwatch -k '*daemon' -F syscall

       # 查看pid为1234的进程的open和openat调用
       dwatch -X open -- -p 1234
     #+end_src
    
    




