
* 系统目录
  | 目录名        | 作用                                         |
  |---------------+----------------------------------------------|
  | /bin/         | UNIX中的二进制程序                           |
  | /sbin         | 系统程序                                     |
  | /usr          | User目录中包含的bin,sbin和lib                |
  | /etc          | 包含了大部分系统配置文件                     |
  | /dev          | 系统的设备文件                               |
  | /tmp          | 临时目录                                     |
  | /var          | 各种杂项文件，日志文件，邮件存储，打印队列等 |
  | /Applications | 系统中所有应用程序的默认目录                 |
  | /Developer    | 所有开发工具安装目录                         |
  | /Library      | 系统应用的数据文件，帮助和文档               |
  | /System       | 系统文件目录包含系统所有重要组件             |
  | /Users        | 所有用户的主目录                             |
  | /Volumes      | 可移动媒体和网络文件系统的挂载目录           |
  | /Cores        | 如果启用了核心转储，该目录会创建核心转储文件 |


  
* XNU 架构
  
  
** Mach微内核
   该内核仅能处理操作系统最基本的职责
   * 进程和线程抽象
   * 虚拟内存管理
   * 任务调度
   * 进程间通信和消息传递机制

** BSD层
   BSD层建立在Mach之上，提供了POSIX兼容性，BSD提供了更高层次的抽象，其中包括
   * UNIX进程模型
   * POSIX线程模型及相关的同步原语
   * UNIX用户和组
   * 文件系统访问
   * 设备访问

** libkern
   为了支持C++运行时并提供需要的基类，XNU包含libkern库，这是一个内建的自包含的C++库
   
** I/O Kit
   这是一个在内核中的完整的，自包含的执行环境，形成了一个受限的C++环境，其他带有语言提供的最重要功能
   继承和重载


   
   



* launchd
  
** launchd与init对比
   | 职责                 | 传统的init                      | launchd                               |
   |----------------------+---------------------------------+---------------------------------------|
   | PID1的功能，所有进程 | init是用户态的第一个进程        | 相同，lunachd还会设置Mach异常端口     |
   | 的祖先               | 从init fork出其他进程           | 内核通过异常端口处理异常情况          |
   | 支持运行级别         | 传统的init支持运行级别          | launchd不能识别运行级别，且只支持每个 |
   |                      |                                 | 守护程序或代理程序自的配置文件        |
   | 启动系统服务         | init按照词典顺序运行/etc/rc?.d  | launchd运行系统服务和用户服务         |
   | 系统服务的规范       | init运行服务方式是运行shell脚本 | launchd处理属性列表文件               |
   | 退出时重启服务       | init识别/etc/inittab中用于重启  | launchd允许守护程序或代理程序的属性   |
   |                      | 的respawn关键词                 | 列表中的KeepAlive键                   |
   | 默认用户             | root                            | root，但是可以指定username键          |

** launchd守护程序的位置
   | 目录                          | 用途                                              |
   |-------------------------------+---------------------------------------------------|
   | /System/Library/LaunchDaemons | 守护程序的plist文件，主要是属于系统本身的守护程序 |
   | /Library/LaunchDaemons        | 守护程序的plist文件，主要是第三方程序的守护程序   |
   | /System/Library/LaunchAgents  | 代理程序的plist文件，主要是属于系统本身的代理程序 |
   | /Library/LaunchAgents         | 其他代理程序的plist文件，主要是第三方的程序       |
   | ~/Library/LaunchAgents        | 用户自有的launch代理程序，只有对应的用户才执行    |


   
* XNU源码树
  | 目录     | 包含的内容                  |
  |----------+-----------------------------|
  | bsd      | 内核的BSD组件               |
  | config   | 各种架构的导出符号          |
  | iokit    | I/O Kit驱动程序运行时子系统 |
  | libkern  | 内核主运行时库API           |
  | osfmk    | 内核的Mach组件              |
  | pexpert  | 平台相关的服务(i386, arm)   |
  | security | BSD MAC框架                 |

  
** bsd子目录
   | 子目录           | 包含的内容                        |
   |------------------+-----------------------------------|
   | bsd/security     | Basic Security Module(审计子系统) |
   | conf             | 机器相关的Makefile                |
   | crypto           | 对称加密算法和散列算法的实现      |
   | dev              | BSD设备                           |
   | hfs              | OSX默认文件系统                   |
   | i386/machine/ppc | intel/ppc架构的私有头文件         |
   | kern             | 内核的主要代码                    |
   | man              | man手册页                         |
   | net*/netinet*    | 网络子系统和IP协议栈              |
   | nfs              | NFSv3协议栈                       |
   | sys              | 内核头文件                        |
   | vfs              | 虚拟文件系统交换                  |
   | vm               | BSD的虚拟内存处理程序             |

** osfmk子目录
   | 子目录           | 包含的内容                               |
   |------------------+------------------------------------------|
   | conf             | 机器相关的Makefile                       |
   | console          | 控制台初始化，串口，引导视频和内核崩溃UI |
   | default_pager    | VM分页器                                 |
   | device           | Mach对I/O Kit和设备的支持                |
   | i386/ppc/x86_64  | CPU的特定实现                            |
   | ipc              | IPC，port和消息                          |
   | kdp              | KDP调试器支持                            |
   | mach, machine    | Mach通用头文件以及和机器相关的内核头文件 |
   | man              | Mach调用APIman手册                       |
   | pmc/profiling    | PMC性能监测                              |
   | UserNotification | 内核到用户的通知                         |
   | vm               | 虚拟内存的实现和头文件                   |

   
* macports
  在macosx平台的包管理器，类似于debian的apt之流，可以方便的管理软件
  | 命令                       | 作用                   |
  |----------------------------+------------------------|
  | port install packagename   | 安装软件包             |
  | port uninstall packagename | 删除软件包             |
  | port echo leaves           | 查看不需要的依赖       |
  | port uninstall leaves      | 删除不需要的信赖       |
  | port selfupdate            | 更新port，以及仓库索引 |
  | port outdated              | 输出可更新的软件包     |
  | port upgrade outdated      | 升级所有可更新的软件包 |
  | port uninstall inactive    | 删除没有用到的软件包   |

   
* 内核扩展
  内核扩展保存目录/System/Library/Extensions
  查看内核扩展
  #+begin_src sh
   kextstat
  #+end_src

  加载内核扩展
  #+begin_src sh
  kextload /path/filename.kext
  #+end_src
  

